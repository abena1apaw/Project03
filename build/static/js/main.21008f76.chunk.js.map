{"version":3,"sources":["component/About.js","contact-form/src/Form.js","contact-form/src/App.js","component/Navbar.js","actions/index.js","component/Link.js","containers/FilterLink.js","component/Footer.js","containers/SubmitTodo.js","component/Todo.js","component/TodoList.js","containers/VisibleTodoList.js","component/ToDoApp.js","App.js","serviceWorker.js","reducers/todos.js","reducers/getvisibilityFilter.js","reducers/index.js","index.js"],"names":["About","className","Form","props","state","fname","lname","email","message","e","preventDefault","axios","method","url","data","this","then","response","status","alert","resetForm","setState","style","display","justifyContent","id","onSubmit","handleSubmit","bind","htmlFor","type","value","onChange","onFNameChange","onLNameChange","aria-describedby","onEmailChange","rows","onMessageChange","event","target","Component","App","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","to","Link","TodoId","getVisibilityFilters","active","children","onClick","disabled","marginLeft","connect","ownProps","filter","getvisibilityFilter","dispatch","Footer","FilterLink","input","text","trim","ref","node","Todo","completed","textDecoration","TodoList","todos","onTodoClick","map","todo","index","key","getVisibleTodos","t","VisibleTodoList","toggleTodo","ToDoApp","NavBar","path","component","Contactus","Boolean","window","location","hostname","match","action","combineReducers","navigator","serviceWorker","ready","registration","unregister","catch","error","console","store","createStore","rootReducer","render","document","getElementById"],"mappings":"6OAWeA,G,WAVD,WACV,OACI,yBAAKC,UAAU,OACX,uCACA,gFACA,2IACA,+E,iDC0EGC,E,kDA5EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,MAAO,GACPC,MAAO,GACPC,MAAO,GACPC,QAAS,IANE,E,yDAUNC,GAAI,IAAD,OACZA,EAAEC,iBACFC,IAAM,CACFC,OAAQ,OACRC,IAAK,6BACLC,KAAMC,KAAKX,QACZY,MAAK,SAACC,GACwB,YAAzBA,EAASH,KAAKI,QACdC,MAAM,iBACN,EAAKC,aAC2B,SAAzBH,EAASH,KAAKI,QACrBC,MAAM,gC,kCAOdJ,KAAKM,SAAS,CAAEhB,MAAO,GAAIC,MAAO,GAAIC,MAAO,GAAIC,QAAS,O,+BAI1D,OACI,yBAAKP,UAAU,OACX,yBAAKqB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAE/C,0BAAMC,GAAG,eAAeC,SAAUX,KAAKY,aAAaC,KAAKb,MAAOH,OAAO,QACnE,yBAAKX,UAAU,cACX,2BAAO4B,QAAQ,SAAf,cACA,2BAAOC,KAAK,OAAO7B,UAAU,eAAewB,GAAG,QAAQM,MAAOhB,KAAKX,MAAMC,MAAO2B,SAAUjB,KAAKkB,cAAcL,KAAKb,SAEtH,yBAAKd,UAAU,cACX,2BAAO4B,QAAQ,SAAf,aACA,2BAAOC,KAAK,OAAO7B,UAAU,eAAewB,GAAG,QAAQM,MAAOhB,KAAKX,MAAME,MAAO0B,SAAUjB,KAAKmB,cAAcN,KAAKb,SAEtH,yBAAKd,UAAU,cACX,2BAAO4B,QAAQ,sBAAf,iBACA,2BAAOC,KAAK,QAAQ7B,UAAU,eAAewB,GAAG,QAAQU,mBAAiB,YAAYJ,MAAOhB,KAAKX,MAAMG,MAAOyB,SAAUjB,KAAKqB,cAAcR,KAAKb,SAEpJ,yBAAKd,UAAU,cACX,2BAAO4B,QAAQ,WAAf,WACA,8BAAU5B,UAAU,eAAeoC,KAAK,IAAIZ,GAAG,UAAUM,MAAOhB,KAAKX,MAAMI,QAASwB,SAAUjB,KAAKuB,gBAAgBV,KAAKb,SAE5H,4BAAQe,KAAK,SAAS7B,UAAU,mBAAhC,e,oCAOFsC,GACVxB,KAAKM,SAAS,CAAEhB,MAAOkC,EAAMC,OAAOT,U,oCAE1BQ,GACVxB,KAAKM,SAAS,CAAEf,MAAOiC,EAAMC,OAAOT,U,oCAG1BQ,GACVxB,KAAKM,SAAS,CAAEd,MAAOgC,EAAMC,OAAOT,U,sCAGxBQ,GACZxB,KAAKM,SAAS,CAAEb,QAAS+B,EAAMC,OAAOT,Y,GAzE3BU,aCeJC,G,6KARP,OACI,kBAAC,EAAD,U,GAHMD,c,wBCyBHE,EA1BA,WAEX,OACI,6BACI,kBAAC,IAAD,CAAuBC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QAClE,kBAAC,IAAsBC,MAAvB,CAA6BC,KAAK,SAAlC,qBACA,kBAAC,IAAsBC,OAAvB,CAA8BC,gBAAc,0BAC5C,kBAAC,IAAsBC,SAAvB,CAAgC3B,GAAG,yBAC/B,kBAAC,IAAD,CAAoBxB,UAAU,WAC1B,kBAAC,IAAD,CAAMoD,GAAI,WACV,kBAAC,IAAmBC,KAApB,CAAyBL,KAAK,UAA9B,UAEA,kBAAC,IAAD,CAAMI,GAAG,aACL,kBAAC,IAAmBC,KAApB,CAAyBL,KAAK,YAA9B,eAEJ,kBAAC,IAAD,CAAMI,GAAG,eACL,kBAAC,IAAmBC,KAApB,CAAyBL,KAAK,cAA9B,oB,QCxBxBM,EAAS,EAiBAC,EACI,cADJA,EAEU,oBAFVA,EAGW,qBCETF,EAlBF,SAAC,GAAD,IAAGG,EAAH,EAAGA,OAAQC,EAAX,EAAWA,SAAUC,EAArB,EAAqBA,QAArB,OACT,4BACIA,QAASA,EACTC,SAAUH,EACVnC,MAAO,CACHuC,WAAY,QAGfH,ICCMI,eARS,SAAC1D,EAAO2D,GAAR,MAAsB,CAC1CN,OAAQM,EAASC,SAAW5D,EAAM6D,wBAGX,SAACC,EAAUH,GAAX,MAAyB,CAChDJ,QAAS,kBAAMO,EFH8B,CAC7CpC,KAAM,2BACNkC,OEC+CD,EAASC,aAG7CF,CAGbR,GCDaa,EATA,kBACX,yBAAKlE,UAAU,OACX,iDACA,kBAACmE,EAAD,CAAYJ,OAAQR,GAApB,OACA,kBAACY,EAAD,CAAYJ,OAAQR,GAApB,aACA,kBAACY,EAAD,CAAYJ,OAAQR,GAApB,gBCoBOM,iBAzBI,SAAC,GAAkB,IAC9BO,EADcH,EAAe,EAAfA,SAGlB,OACI,6BACI,gCACA,0BACIxC,SAAU,SAAAjB,GJZA,IAAA6D,GIaN7D,EAAEC,iBACG2D,EAAMtC,MAAMwC,UAGjBL,GJjBMI,EIiBcD,EAAMtC,MJjBX,CAC/BD,KAAM,cACNL,GAAI8B,IACJe,UIegBD,EAAMtC,MAAQ,MAGlB,2BAAOyC,IAAK,SAAAC,GAAI,OAAKJ,EAAQI,KAC7B,4BAAQ3C,KAAK,UAAb,qBCHD4C,EAjBF,SAAC,GAAD,IAAGf,EAAH,EAAGA,QAASgB,EAAZ,EAAYA,UAAWL,EAAvB,EAAuBA,KAAvB,OACT,wBACIX,QAASA,EACTrC,MAAO,CACHsD,eAAgBD,EAAY,eAAiB,SAGhDL,ICeMO,EAnBE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,YAAV,OACb,4BACKD,EAAME,KAAI,SAACC,EAAMC,GAAP,OACP,kBAAC,EAAD,eAAMC,IAAKD,GAAWD,EAAtB,CAA4BtB,QAAS,kBAAMoB,EAAYG,YCL7DE,EAAkB,SAACN,EAAOd,GAE5B,OAAQA,GACJ,IAAK,cACD,OAAOc,EACX,IAAK,oBACD,OAAOA,EAAMd,QAAO,SAAAqB,GAAC,OAAIA,EAAEV,aAC/B,IAAK,qBACD,OAAOG,EAAMd,QAAO,SAAAqB,GAAC,OAAKA,EAAEV,eAoBzBW,EAFSxB,aAdA,SAAA1D,GACpB,MAAO,CACH0E,MAAOM,EAAgBhF,EAAM0E,MAAO1E,EAAM6D,yBAIvB,SAAAC,GACvB,MAAO,CACHa,YAAa,SAAAtD,GACTyC,EPbc,SAAAzC,GAAE,MAAK,CAC7BK,KAAM,cACNL,MOWiB8D,CAAW9D,QAKRqC,CAA6Ce,GCVtDW,EAZA,kBAEX,yBAAKlE,MAAO,CAAEC,QAAS,OAAQC,eAAgB,WAC3C,6BACI,0CACJ,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,QCgBOiE,EArBA,WACX,OACI,yBAAKxF,UAAU,OACX,kBAAC,IAAD,KACA,kBAAC,EAAD,MACQ,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOyF,KAAK,SAASC,UAAW3F,GACxB,kBAAC,EAAD,OAER,kBAAC,IAAD,CAAO0F,KAAK,WAAWC,UAAWH,GAC1B,kBAAC,EAAD,OAER,kBAAC,IAAD,CAAOE,KAAK,aAAaC,UAAWC,GAC5B,kBAAC,EAAD,W,MCXRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCESnB,EApBD,WAAyB,IAAxB1E,EAAuB,uDAAf,GAAI8F,EAAW,uCAClC,OAAQA,EAAOpE,MACX,IAAK,cACD,MAAM,GAAN,mBACO1B,GADP,CAEI,CACIqB,GAAIyE,EAAOzE,GACX6C,KAAM4B,EAAO5B,KACbK,WAAW,KAGvB,IAAK,cACD,OAAOvE,EAAM4E,KAAI,SAAAC,GAAI,OACjBA,EAAKxD,KAAOyE,EAAOzE,GAAnB,eAA6BwD,EAA7B,CAAmCN,WAAYM,EAAKN,YAAcM,KAE1E,QACI,OAAO7E,ICJJ6D,EATa,WAAuD,IAAtD7D,EAAqD,uDAA7CoD,EAAkC0C,EAAW,uCAC9E,OAAQA,EAAOpE,MACX,IAAK,2BACD,OAAOoE,EAAOlC,OAClB,QACI,OAAO5D,ICHJ+F,cAAgB,CAC3BrB,QACAb,wBH4HE,kBAAmBmC,WACrBA,UAAUC,cAAcC,MACrBtF,MAAK,SAAAuF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlG,YI/H5B,IAAMoG,EAAQC,YAAYC,GAE1BC,iBACI,kBAAC,IAAD,CAAUH,MAAOA,GACb,kBAAC,EAAD,MADJ,KAGAI,SAASC,eAAe,W","file":"static/js/main.21008f76.chunk.js","sourcesContent":["import React from 'react';\r\nconst About = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <h1> About </h1>\r\n            <p> This is a react app using redux to handle todos.</p>\r\n            <p> The app has 3 views, About, Contact us, and To do App. Accessible through /About. /Contactus, and /TodoApp.</p>\r\n            <p> Contact form uses Express.js and Nodemailer.</p>\r\n        </div >\r\n      )\r\n}\r\nexport default About;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            fname: '',\r\n            lname: '',\r\n            email: '',\r\n            message: ''\r\n        }\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"http://localhost:3002/send\",\r\n            data: this.state\r\n        }).then((response) => {\r\n            if (response.data.status === 'success') {\r\n                alert(\"Message Sent.\");\r\n                this.resetForm()\r\n            } else if (response.data.status === 'fail') {\r\n                alert(\"Message failed to send.\")\r\n            }\r\n        })\r\n    }\r\n\r\n    resetForm() {\r\n\r\n        this.setState({ fname: '', lname: '', email: '', message: '' })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    \r\n                <form id=\"contact-form\" onSubmit={this.handleSubmit.bind(this)} method=\"POST\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"fname\">First Name</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"fname\" value={this.state.fname} onChange={this.onFNameChange.bind(this)} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"lname\">Last Name</label>\r\n                        <input type=\"text\" className=\"form-control\" id=\"lname\" value={this.state.lname} onChange={this.onLNameChange.bind(this)} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"exampleInputEmail1\">Email address</label>\r\n                        <input type=\"email\" className=\"form-control\" id=\"email\" aria-describedby=\"emailHelp\" value={this.state.email} onChange={this.onEmailChange.bind(this)} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"message\">Message</label>\r\n                        <textarea className=\"form-control\" rows=\"5\" id=\"message\" value={this.state.message} onChange={this.onMessageChange.bind(this)} />\r\n                    </div>\r\n                    <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    </form>\r\n                    </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onFNameChange(event) {\r\n        this.setState({ fname: event.target.value })\r\n    }\r\n    onLNameChange(event) {\r\n        this.setState({ lname: event.target.value })\r\n    }\r\n\r\n    onEmailChange(event) {\r\n        this.setState({ email: event.target.value })\r\n    }\r\n\r\n    onMessageChange(event) {\r\n        this.setState({ message: event.target.value })\r\n    }\r\n}\r\n\r\nexport default Form;","\r\n// Dependencies\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { Component } from 'react';\r\n// Externals\r\nimport Form from './Form';\r\n\r\n// Internals\r\nimport './App.css';\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <Form />\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\nimport * as ReactBootstrap from \"react-bootstrap\";\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    //render() {\r\n    return (\r\n        <div>\r\n            <ReactBootstrap.Navbar collapseOnSelect expand=\"sm\" bg=\"dark\" variant=\"dark\">\r\n                <ReactBootstrap.Navbar.Brand href=\"#home\">Abena's Project 3</ReactBootstrap.Navbar.Brand>\r\n                <ReactBootstrap.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <ReactBootstrap.Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                    <ReactBootstrap.Nav className=\"mr-auto\">\r\n                        <Link to =\"./About\">\r\n                        <ReactBootstrap.Nav.Link href=\"#About\">About</ReactBootstrap.Nav.Link>\r\n                        </Link>\r\n                        <Link to=\"./ToDoApp\">\r\n                            <ReactBootstrap.Nav.Link href=\"#ToDoApp\">To Do List</ReactBootstrap.Nav.Link>\r\n                        </Link>\r\n                        <Link to=\"./Contactus\">\r\n                            <ReactBootstrap.Nav.Link href=\"#Contactus\">Contact Us</ReactBootstrap.Nav.Link>\r\n                            </Link>\r\n                    </ReactBootstrap.Nav>\r\n\r\n                </ReactBootstrap.Navbar.Collapse>\r\n            </ReactBootstrap.Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","let TodoId = 0\r\nexport const SubmitTodo = text => ({\r\n    type: 'SUBMIT_TODO',\r\n    id: TodoId++,\r\n    text\r\n})\r\n\r\nexport const createVisibilityFilter = filter => ({\r\n    type: 'CREATE_VISIBILITY_FILTER',\r\n    filter\r\n})\r\n\r\nexport const toggleTodo = id => ({\r\n    type: 'TOGGLE_TODO',\r\n    id\r\n})\r\n\r\nexport const getVisibilityFilters = {\r\n    DISPLAY_ALL: 'DISPLAY_ALL',\r\n    DISPLAY_COMPLETED: 'DISPLAY_COMPLETED',\r\n    DISPLAY_INCOMPLETE: 'DISPLAY_INCOMPLETE'\r\n}","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Link = ({ active, children, onClick }) => (\r\n    <button\r\n        onClick={onClick}\r\n        disabled={active}\r\n        style={{\r\n            marginLeft: '4px'\r\n        }}\r\n    >\r\n        {children}\r\n    </button>\r\n)\r\n\r\nLink.propTypes = {\r\n    active: PropTypes.bool.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n    onClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Link","import { connect } from 'react-redux'\r\nimport '../App.css';\r\nimport { createVisibilityFilter } from '../actions'\r\nimport Link from '../component/Link'\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n    active: ownProps.filter === state.getvisibilityFilter\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    onClick: () => dispatch(createVisibilityFilter(ownProps.filter))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Link)\r\n\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react'\r\nimport '../App.css';\r\nimport FilterLink from '../containers/FilterLink'\r\nimport { getVisibilityFilters } from '../actions'\r\n\r\nconst Footer = () => (\r\n    <div className=\"App\">\r\n        <span>Display Tasks: </span>\r\n        <FilterLink filter={getVisibilityFilters.DISPLAY_ALL}>ALL</FilterLink>\r\n        <FilterLink filter={getVisibilityFilters.DISPLAY_COMPLETED}>COMPLETED</FilterLink>\r\n        <FilterLink filter={getVisibilityFilters.DISPLAY_INCOMPLETE}>INCOMPLETE</FilterLink>        \r\n    </div>\r\n)\r\n\r\nexport default Footer","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react'\r\n//import '../App.css';\r\nimport { connect } from 'react-redux'\r\nimport { SubmitTodo } from '../actions'\r\n\r\nconst submitTodo = ({ dispatch }) => {\r\n    let input\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n            <form\r\n                onSubmit={e => {\r\n                    e.preventDefault()\r\n                    if (!input.value.trim()) {\r\n                        return\r\n                    }\r\n                    dispatch(SubmitTodo(input.value))\r\n                    input.value = ''\r\n                }}\r\n            >\r\n                <input ref={node => (input = node)} />\r\n                <button type=\"submit\">Submit Todo</button>\r\n            </form>\r\n        \r\n            </header>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default connect()(submitTodo)\r\n\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Todo = ({ onClick, completed, text }) => (\r\n    <li\r\n        onClick={onClick}\r\n        style={{\r\n            textDecoration: completed ? 'line-through' : 'none'\r\n        }}\r\n    >\r\n        {text}\r\n    </li>\r\n)\r\n\r\nTodo.propTypes = {\r\n    onClick: PropTypes.func.isRequired,\r\n    completed: PropTypes.bool.isRequired,\r\n    text: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Todo","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todos, onTodoClick }) => (\r\n    <ul>\r\n        {todos.map((todo, index) => (\r\n            <Todo key={index} {...todo} onClick={() => onTodoClick(index)} />\r\n        ))}\r\n    </ul>\r\n)\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number.isRequired,\r\n            completed: PropTypes.bool.isRequired,\r\n            text: PropTypes.string.isRequired\r\n        }).isRequired\r\n    ).isRequired,\r\n    onTodoClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default TodoList","import { connect } from 'react-redux'\r\nimport { toggleTodo } from '../actions'\r\nimport TodoList from '../component/TodoList'\r\n\r\nconst getVisibleTodos = (todos, filter) => {\r\n    // eslint-disable-next-line \r\n    switch (filter) {\r\n        case 'DISPLAY_ALL':\r\n            return todos\r\n        case 'DISPLAY_COMPLETED':\r\n            return todos.filter(t => t.completed)\r\n        case 'DISPLAY_INCOMPLETE':\r\n            return todos.filter(t => !t.completed)\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        todos: getVisibleTodos(state.todos, state.getvisibilityFilter)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onTodoClick: id => {\r\n            dispatch(toggleTodo(id))\r\n        }\r\n    }\r\n}\r\n\r\nconst VisibleTodoList = connect(mapStateToProps, mapDispatchToProps)(TodoList)\r\n\r\nexport default VisibleTodoList;","import 'bootstrap/dist/css/bootstrap.min.css';\r\n//import '../App.css';\r\nimport React from 'react'\r\nimport Footer from './Footer'\r\nimport SubmitTodo from '../containers/SubmitTodo'\r\nimport VisibleTodoList from '../containers/VisibleTodoList'\r\n\r\n\r\nconst ToDoApp= () => (\r\n    \r\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n        <div>\r\n            <h1>To Do List</h1>\r\n        <SubmitTodo />\r\n        <VisibleTodoList />\r\n        <Footer />\r\n        </div>\r\n        </div>\r\n)\r\n\r\nexport default ToDoApp;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport About from \"./component/About\";\r\nimport Contactus from './contact-form/src/App';\r\nimport Navbar from './component/Navbar';\r\nimport ToDoApp from './component/ToDoApp';\r\nimport {HashRouter as Router, Switch, Route}  from \"react-router-dom\";                      \r\n\r\n\r\nconst NavBar = () => {    \r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n            <Navbar />    \r\n                    <Switch>\r\n                    <Route path=\"/About\" component={About}>\r\n                            <About />\r\n                        </Route>\r\n                    <Route path=\"/ToDoApp\" component={ToDoApp}>\r\n                            <ToDoApp />\r\n                        </Route>\r\n                    <Route path=\"/Contactus\" component={Contactus}>\r\n                            <Contactus />\r\n                        </Route>\r\n                </Switch>\r\n            </Router>\r\n                </div>\r\n        )    \r\n        \r\n    }\r\nexport default NavBar;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const todos = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'SUBMIT_TODO':\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    text: action.text,\r\n                    completed: false\r\n                }\r\n            ]\r\n        case 'TOGGLE_TODO':\r\n            return state.map(todo =>\r\n                todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\r\n            )\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default todos","import { getVisibilityFilters } from '../actions'\r\n//import '../App.css';\r\n\r\nconst getvisibilityFilter = (state = getVisibilityFilters.DISPLAY_ALL, action) => {\r\n    switch (action.type) {\r\n        case 'CREATE_VISIBILITY_FILTER':\r\n            return action.filter\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default getvisibilityFilter","import { combineReducers } from 'redux'\r\n//import '../App.css';\r\nimport todos from './todos'\r\nimport getvisibilityFilter from './getvisibilityFilter'\r\n\r\nexport default combineReducers({\r\n    todos,\r\n    getvisibilityFilter\r\n})","import React from 'react';\r\nimport { render } from 'react-dom'\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport rootReducer from './reducers'\r\nserviceWorker.unregister();\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <App />,\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}