{"version":3,"sources":["component/About.js","component/layout/MemeHeader.js","component/MemeGenerator.js","component/MemeApp.js","component/Navbar.js","component/TodoItem.js","component/Todos.js","component/layout/Header.js","component/AddTodo.js","component/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["About","className","Header","style","backgroundColor","color","padding","fontSize","lineHeight","margin","MemeGenerator","state","topText","bottomText","randomImage","allMemeImgs","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","randNum","Math","floor","random","length","randMemeImgUrl","url","fetch","then","response","json","data","memes","onSubmit","this","type","placeholder","onChange","src","alt","Component","MemeApp","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","id","to","Link","TodoItem","props","todo","completed","title","checked","onClick","deleteTodo","fontStyle","textDecoration","React","Todos","todos","map","key","AddTodo","addTodo","TodoApp","uuidv4","filter","newTodo","NavBar","path","component","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ea26a89.chunk.js","sourcesContent":["import React from 'react';\r\nconst About = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <h1> About </h1>\r\n            <p> This is a react app using redux to handle todos.</p>\r\n            <p> The app has 3 views, About, Contact us, and To do App. Accessible through /About. /Contactus, and /TodoApp.</p>\r\n            <p> Contact form uses Express.js and Nodemailer.</p>\r\n        </div >\r\n      )\r\n}\r\nexport default About;","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\n\r\nconst Header = () => {\r\n  const headerStyle = {\r\n    backgroundColor: \"#800080\",\r\n    color: \"#fff\",\r\n    padding: \"10px 15px\",\r\n  };\r\n\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1 style={{ fontSize: \"25px\", lineHeight: \"1.447em\", margin: \"0px\" }}>\r\n        Abena's Meme Generator\r\n      </h1>\r\n    </header>\r\n  );\r\n};\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\n\r\nclass MemeGenerator extends Component {\r\n  state = {\r\n    topText: \"\",\r\n    bottomText: \"\",\r\n    randomImage: \"https://i.imgflip.com/26am.jpg\",\r\n    allMemeImgs: [],\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.imgflip.com/get_memes\")\r\n      .then((response) => response.json())\r\n      .then((response) =>\r\n        this.setState({\r\n          allMemeImgs: response.data.memes,\r\n        })\r\n      );\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length);\r\n    const randMemeImgUrl = this.state.allMemeImgs[randNum].url;\r\n    this.setState({ randomImage: randMemeImgUrl });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <form onSubmit={this.handleSubmit} className=\"meme-form\">\r\n          <input\r\n            className=\"meme-input\"\r\n            type=\"text\"\r\n            name=\"topText\"\r\n            placeholder=\"Add Top Text\"\r\n            value={this.state.topText}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            className=\"meme-input\"\r\n            type=\"text\"\r\n            name=\"bottomText\"\r\n            placeholder=\"Add Bottom Text\"\r\n            value={this.state.bottomText}\r\n            onChange={this.handleChange}\r\n          />\r\n          <button className=\"meme-button\">Generate Meme</button>\r\n        </form>\r\n        <div className=\"meme\">\r\n          <img src={this.state.randomImage} alt=\"\" />\r\n          <h2 className=\"top\">{this.state.topText}</h2>\r\n          <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MemeGenerator;\r\n","import React from \"react\";\r\nimport Header from \"./layout/MemeHeader\";\r\nimport MemeGenerator from \"./MemeGenerator\";\r\n\r\nconst MemeApp = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <MemeGenerator />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemeApp;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../App.css\";\r\nimport * as ReactBootstrap from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  //render() {\r\n  return (\r\n    <div>\r\n      <ReactBootstrap.Navbar\r\n        collapseOnSelect\r\n        expand=\"sm\"\r\n        bg=\"dark\"\r\n        variant=\"dark\"\r\n      >\r\n        <ReactBootstrap.Navbar.Brand href=\"#home\">\r\n          Abena's Project 3\r\n        </ReactBootstrap.Navbar.Brand>\r\n        <ReactBootstrap.Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n        <ReactBootstrap.Navbar.Collapse id=\"responsive-navbar-nav\">\r\n          <ReactBootstrap.Nav className=\"mr-auto\">\r\n            <Link to=\"./About\">\r\n              <ReactBootstrap.Nav.Link href=\"#About\">\r\n                About\r\n              </ReactBootstrap.Nav.Link>\r\n            </Link>\r\n            <Link to=\"./TodoApp\">\r\n              <ReactBootstrap.Nav.Link href=\"#TodoApp\">\r\n                To Do List\r\n              </ReactBootstrap.Nav.Link>\r\n            </Link>\r\n            <Link to=\"./MemeApp\">\r\n              <ReactBootstrap.Nav.Link href=\"#MemeApp\">\r\n                Meme Generator\r\n              </ReactBootstrap.Nav.Link>\r\n            </Link>\r\n          </ReactBootstrap.Nav>\r\n        </ReactBootstrap.Navbar.Collapse>\r\n      </ReactBootstrap.Navbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nclass TodoItem extends React.Component {\r\n  render() {\r\n    const completedStyle = {\r\n      fontStyle: \"italic\",\r\n      color: \"#0f0f0f\",\r\n      textDecoration: \"line-through\",\r\n    };\r\n\r\n    const { completed, id, title } = this.props.todo;\r\n\r\n    return (\r\n      <li className=\"todo-item\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={completed}\r\n          onChange={() => this.props.handleChange(id)}\r\n        />\r\n        <button className=\"btn-style\" onClick={() => this.props.deleteTodo(id)}>\r\n          X\r\n        </button>\r\n        <span style={completed ? completedStyle : null}>{title}</span>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass Todos extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.props.todos.map((todo) => (\r\n          <TodoItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            handleChange={this.props.handleChange}\r\n            deleteTodo={this.props.deleteTodo}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Todos;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React from \"react\";\r\n\r\nfunction Header() {\r\n  const headerStyle = {\r\n    backgroundColor: \"#800080\",\r\n    color: \"#fff\",\r\n    padding: \"10px 15px\",\r\n  };\r\n\r\n  return (\r\n    <header style={headerStyle}>\r\n      <h1 style={{ fontSize: \"25px\", lineHeight: \"1.447em\", margin: \"0px\" }}>\r\n        Abena's Todo App\r\n      </h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddTodo extends Component {\r\n  state = {\r\n    title: \"\",\r\n  };\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({\r\n      title: \"\",\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <form className=\"form-container\" onSubmit={this.onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Add Todo...\"\r\n          className=\"input-text\"\r\n          name=\"title\"\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n        <input type=\"submit\" value=\"Submit\" className=\"input-submit\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\r\n//import '../App.css';\r\nimport React from \"react\";\r\nimport Todos from \"./Todos\";\r\nimport Header from \"./layout/Header\";\r\nimport AddTodo from \"./AddTodo\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nclass TodoApp extends React.Component {\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Go to Gym\",\r\n        completed: true,\r\n      },\r\n      { id: uuidv4(), title: \"Meditation\", completed: false },\r\n      { id: uuidv4(), title: \"Go to Work\", completed: false },\r\n    ],\r\n  };\r\n  handleChange = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      }),\r\n    });\r\n  };\r\n\r\n  deleteTodo = (id) => {\r\n    this.setState({\r\n      todos: [\r\n        ...this.state.todos.filter((todo) => {\r\n          return todo.id !== id;\r\n        }),\r\n      ],\r\n    });\r\n  };\r\n\r\n  addTodo = (title) => {\r\n    const newTodo = {\r\n      // id: uuid.v4(),\r\n      id: uuidv4(),\r\n      title: title,\r\n      completed: false,\r\n    };\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo],\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Header />\r\n        <AddTodo addTodo={this.addTodo} />\r\n        <Todos\r\n          todos={this.state.todos}\r\n          handleChange={this.handleChange}\r\n          deleteTodo={this.deleteTodo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TodoApp;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport About from \"./component/About\";\r\nimport MemeApp from \"./component/MemeApp\";\r\nimport Navbar from \"./component/Navbar\";\r\nimport TodoApp from \"./component/TodoApp\";\r\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route path=\"/About\" component={About}>\r\n            <About />\r\n          </Route>\r\n          <Route path=\"/TodoApp\" component={TodoApp}>\r\n            <TodoApp />\r\n          </Route>\r\n          <Route path=\"/MemeApp\" component={MemeApp}>\r\n            <MemeApp />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\nexport default NavBar;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nserviceWorker.unregister();\r\n\r\nReactDOM.render(\r\n  <App />,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}